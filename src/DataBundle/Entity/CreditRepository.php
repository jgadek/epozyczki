<?php

namespace DataBundle\Entity;

use Doctrine\ORM\EntityRepository;
use App\GuardBundle\Entity\GuardUser;
use DataBundle\Entity\Credit;

/**
 * CreditRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CreditRepository extends EntityRepository
{

    public function getCreditsByPreferences(GuardUser $objUser, $page, $order, $sort, $count = false, $limit = Credit::DEFAULT_LIMIT_LENDER_DASHBOARD)
    {
        $order = preg_replace_callback('/_./', function ($matches) {
            return strtoupper(str_replace('_', '', $matches[0]));
        }, $order);


        $offset = ($page - 1) * $limit;
//        $join = 'WHERE';
//
//        $idQuery = '';
//        if (isset($arrFilter['id']) && $arrFilter['id'] !== null && $arrFilter['id'] !== '') {
//            $idQuery = $join . " gu.id = " . $arrFilter['id'] . " ";
//            $join = "AND";
//        }
//
//        $usernameQuery = '';
//        if (isset($arrFilter['username']) && $arrFilter['username'] !== null && $arrFilter['username'] !== '') {
//            $usernameQuery = $join . " gu.username like '%" . $arrFilter['username'] . "%' ";
//            $join = "AND";
//        }
//
//        $emailQuery = '';
//        if (isset($arrFilter['email']) && $arrFilter['email'] !== null && $arrFilter['email'] !== '') {
//            $emailQuery = $join . " gu.email like '%" . $arrFilter['email'] . "%' ";
//            $join = "AND";
//        }

        if ($count === true) {
            $queryInstance = $this->getEntityManager()->createQuery("
                SELECT count(c)
                    FROM DataBundle:Credit c
            ");
            return $queryInstance->getResult(\Doctrine\ORM\AbstractQuery::HYDRATE_SINGLE_SCALAR);
        }


        $strOrderBy = "ORDER BY c.$order $sort";

        $queryInstance = $this->getEntityManager()->createQuery("
            SELECT c
                FROM DataBundle:Credit c
                $strOrderBy
        ");
        if ($count) {
            return $queryInstance->getResult(\Doctrine\ORM\AbstractQuery::HYDRATE_SINGLE_SCALAR);
        }
        return $queryInstance
                        ->setMaxResults($limit)
                        ->setFirstResult($offset)
                        ->getResult();
    }
    
    public function activeCreditsByUser(GuardUser $objUser)
    {
        $this
                ->createQueryBuilder('c')
                ->update()
                ->set('c.status', Credit::STATUS_ADMIN_VERIFICATION)
                ->where('c.guardUser = :guardUser')
                ->andWhere('c.status = :status')
                ->setParameter('status', Credit::STATUS_NEW)
                ->setParameter('guardUser', $objUser)
                ->getQuery()
                ->execute();
    }
    
    public function getByPreferencesLender(GuardUser $objLender)
    {
        return $this
                ->createQueryBuilder('c')
                ->andWhere('c.creditAmount >= ' . $objLender->getLenderAmountFrom())
                ->andWhere('c.creditAmount <= ' . $objLender->getLenderAmountTo())
                ->andWhere('c.replaymentTime >= ' . $objLender->getLenderReplaymentTimeForm())
                ->andWhere('c.replaymentTime <= ' . $objLender->getLenderReplaymentTimeTo())
                ->andWhere('c.status = :status')
                ->setParameter(':status', Credit::STATUS_ADMIN_ACCEPTED)
                ->getQuery()
                ->execute();
    }

}
